#include <iostream>
#include <fstream>
#include <vector>
#include <string>

using namespace std;

struct jugador {
    string nombre;
    string apellido;
    string fichas;
    string rondasJugadas;
    string rondasGanadas;
    string percentGanadas;
};

string nombreFichero;
jugador defaultPlayers[10];
vector <jugador> jugadores;

void mainMenu(char);
void guardarPartida(string);
void cargarPartida(string);
void agregarJugador();
void erasePlayer();
void statsJugador();
void leaderboardPartida();
void ganadorRonda();
void transferirFichas();

jugador playerFinder(string);
int indexFinder(jugador);
vector<jugador> playerSorter(vector<jugador>);
void eliminarJugadoresSinFichas();
void winRateUpdate();

int main() {
    char x;

    cout << "Nombre del fichero: ";
    cin >> nombreFichero;

    ifstream JInput(nombreFichero);

    if (JInput.fail())
        cerr << "Error al abrir el fichero, por favor revisar si el archivo existe en el compilador." << endl;
    else {
        jugador tempPlayer;
        for (int i = 0; i < 10 && getline(JInput, tempPlayer.nombre); i++) {
            getline(JInput, tempPlayer.apellido);
            getline(JInput, tempPlayer.fichas);
            getline(JInput, tempPlayer.rondasJugadas);
            getline(JInput, tempPlayer.rondasGanadas);
            getline(JInput, tempPlayer.percentGanadas);

            if (!tempPlayer.percentGanadas.empty()) {
                jugadores.push_back(tempPlayer);
            }
        }

        JInput.close();

        cout << "Bienvenido a su administrador de partidas de poker!" << endl;

        mainMenu(x);
    }

    return 0;
}

void mainMenu (char x) {
    cout << endl << endl << "Pulse una de las siguientes teclas para seleccionar lo que desee hacer: " << endl;
   
    cout << "A: Agregar Jugador" << endl;
    cout << "C: Cargar Partida" << endl;
    cout << "D: Declarar Ganador de Ronda" << endl;
    cout << "E: Eliminar Jugador" << endl;
    cout << "G: Guardar Partida" << endl;
    cout << "L: Ver Leaderboard" << endl;
    cout << "S: Ver Stats de un Jugador" << endl;
    cout << "T: Transferir Fichas" << endl;
    cout << "X: Salir del programa" << endl;
    cin >> x;
    cout << "\n";
    
    while ((toupper(x) != 'A') && (toupper(x) != 'C') && (toupper(x) != 'E') && (toupper(x) != 'G') && (toupper(x) != 'L') && (toupper(x) != 'S') && (toupper(x) != 'D') && (toupper(x) != 'X') && (toupper(x) != 'T')) {            
        cout << "Caracter no asignado. Por favor, introduzca un caracter asignado: " << endl;
        cin >> x;
        if ((toupper(x) == 'A') || (toupper(x) == 'C') || (toupper(x) == 'E') || (toupper(x) == 'G') || (toupper(x) == 'L') || (toupper(x) == 'S') || (toupper(x) == 'D') || (toupper(x) == 'X') && (toupper(x) != 'T'))
            break;
    }
   
    switch (toupper(x)) {
        case 'A':
            agregarJugador();
            mainMenu(x);
            break;
        case 'C':
            cargarPartida(nombreFichero);
            mainMenu(x);
            break;
        case 'E':
            erasePlayer();
            mainMenu(x);
            break;
        case 'G':
            guardarPartida(nombreFichero);
            mainMenu(x);
            break;
        case 'L':
            leaderboardPartida();
            mainMenu(x);
            break;
        case 'S':
            statsJugador();
            mainMenu(x);
            break;
        case 'D':
            ganadorRonda();
            mainMenu(x);
            break;
        case 'T':
            transferirFichas();
            mainMenu(x);
            break;
        case 'X':
            cout << "Hasta Pronto!";
            break;
    }
}

void guardarPartida (string nombreFichero) {
    ofstream file(nombreFichero);

    if (!file) {
        cerr << "Error al abrir el fichero" << endl;
        return;
    }
    
    for (int i = 0; i < jugadores.size(); i++) {
        file << jugadores[i].nombre << endl;
        file << jugadores[i].apellido << endl;
        file << jugadores[i].fichas << endl;
        file << jugadores[i].rondasJugadas << endl;
        file << jugadores[i].rondasGanadas << endl;
        file << jugadores[i].percentGanadas << endl;     
    }
    
    file.close();
    cout << "Se ha guardado la partida en el fichero correctamente" << endl;
}

void cargarPartida (string nombreFichero) {
    char confirm;
    string nuevoFichero;
    
    cout << "Seguro? Los datos no guardados no se pueden recuperar: Y/N" << endl;
    cin >> confirm;
    while ((toupper(confirm) != 'Y') && (toupper(confirm) != 'N')) {
        cout << "Respuesta no aceptable, por favor, inserte Y o N: ";
        cin >> confirm;
    }

    if (toupper(confirm) == 'N')
        return;
    
    if (toupper(confirm) == 'Y') {
        cout << endl << "Nombre del nuevo fichero: ";
        cin >> nuevoFichero;
    
        ifstream JInput(nuevoFichero);
   
        if (JInput.fail())
            cout << "Error al abrir el fichero" << endl;
        else {
            jugador tempPlayer;
            for (int i = 0; i < 10 && getline(JInput, tempPlayer.nombre); i++) {
                getline(JInput, tempPlayer.apellido);
                getline(JInput, tempPlayer.fichas);
                getline(JInput, tempPlayer.rondasJugadas);
                getline(JInput, tempPlayer.rondasGanadas);
                getline(JInput, tempPlayer.percentGanadas);

                if (!tempPlayer.percentGanadas.empty()) {
                    jugadores.push_back(tempPlayer);
                }
            }

            JInput.close();
        }
    }
}

jugador playerFinder(string name) {
    jugador ERROR;
    ERROR.nombre = "N/A";

    for (int i = 0; i < jugadores.size(); i++) {
        bool match = true;
        for (int j = 0; j < name.size(); j++) {
            if (tolower(name[j]) != tolower(jugadores[i].nombre[j])) {
                match = false;
                break; // Break out of inner loop if a mismatch is found
            }
        }
        if (match && name.size() == jugadores[i].nombre.size()) {
            return jugadores[i]; // Return player if names match and have the same length
        }
    }
    return ERROR; // Return ERROR if no player is found
}

int indexFinder (jugador player) {
    jugador indexedPlayer = playerFinder(player.nombre);
    for (int i = 0; i < jugadores.size(); i++) {
        if (player.nombre == jugadores[i].nombre)
            return i;
    }
    return -1;
}

void agregarJugador () {
    if(jugadores.size() >= 10)
        cout << "No se pueden agregar nuevos jugadores a la partida, elimine a uno" << endl;
    else {
        jugador temp; // jugador temporal para almacenar los datos del jugador nuevo en el vector
        jugadores.push_back(temp);
       
        cout << "Nombre del jugador: ";
        cin >> jugadores[(jugadores.size() - 1)].nombre;
            
        cout << "Apellido del jugador: ";
        cin >> jugadores[(jugadores.size() - 1)].apellido;
            
        jugadores[(jugadores.size() - 1)].fichas = "33";
        jugadores[(jugadores.size() - 1)].rondasJugadas = "0";
        jugadores[(jugadores.size() - 1)].rondasGanadas = "0";
        jugadores[(jugadores.size() - 1)].percentGanadas = "0";
       
        cout << endl << "Jugador agregado: \"" << jugadores[(jugadores.size() - 1)].nombre << " " << jugadores[(jugadores.size() - 1)].apellido << "\"!";
    }
}

void erasePlayer () {
    jugador eliminatedPlayer;
    string playerName;
    bool erased = false;

    cout << "Â¿Jugador a borrar?" << endl;
    for (int i = 0; i < jugadores.size(); i++)
        cout << "->" << jugadores[i].nombre << endl;
    cin >> playerName;
    eliminatedPlayer = playerFinder(playerName);
    int indexOfPlayer = indexFinder(eliminatedPlayer);
   
    if (eliminatedPlayer.nombre == "N/A") {
        cout << endl << "No se ha encontrado a ni un jugador con ese nombre" << endl;
        return;
    }
    jugadores.erase(jugadores.begin() + indexOfPlayer);

    cout << endl << "El jugador " << playerName << " ha sido borrado" << endl;
    cout << endl << "Jugadores actuales: " << endl;
    for (int i = 0; i < jugadores.size(); i++)
        cout << jugadores[i].nombre << " " << jugadores[i].apellido << endl;
}

void statsJugador () {
    jugador player;
    string playerName;
    
    cout << "Las stats del jugador..." << endl;
    
    for (int i = 0; i < jugadores.size(); i++)
        cout << "->" << jugadores[i].nombre << endl;
    cin >> playerName;
    player = playerFinder(playerName);
    int indexOfPlayer = indexFinder(player);

    if (player.nombre == "N/A") {
        cout << endl << "No se ha encontrado a ni un jugador con ese nombre" << endl;
        return;
    }

    cout << endl << jugadores[indexOfPlayer].nombre << " " << jugadores[indexOfPlayer].apellido << ":" << endl;
    cout << "Fichas: " << jugadores[indexOfPlayer].fichas << endl;
    cout << "Juegos jugados: " << jugadores[indexOfPlayer].rondasJugadas << endl;
    cout << "Juegos ganados: " << jugadores[indexOfPlayer].rondasGanadas << endl;
    cout << "Porcentaje de ganados: " << jugadores[indexOfPlayer].percentGanadas << "%" << endl;
}

vector<jugador> playerSorter (vector<jugador> jugadores) {
    vector <jugador> unsorted = jugadores;
    vector <jugador> sorted;

    for (int i = 0; i < unsorted.size(); i++) {
        jugador bestPlayer = unsorted[0];
        for (int j = 1; j < unsorted.size(); j++) {
            if (bestPlayer.fichas <= unsorted[j].fichas) {
                if ((bestPlayer.fichas == unsorted[j].fichas) && (bestPlayer.percentGanadas < unsorted[j].percentGanadas))
                    bestPlayer = unsorted[j];
            }
        }
        for (int k = 0; k < unsorted.size(); k++) {
            if (bestPlayer.nombre == unsorted[k].nombre)
                unsorted.erase(unsorted.begin() + k);
                sorted.push_back(bestPlayer);
        }
    }

    return sorted;
}

void leaderboardPartida () {
    vector sortedPlayers = playerSorter(jugadores);
    
    for (int j = 0; j < sortedPlayers.size(); j++) {
        cout << endl << "Jugador: " << sortedPlayers[j].nombre << " " << sortedPlayers[j].apellido << endl;
        cout << "Fichas actuales: " << sortedPlayers[j].fichas << endl;
        cout << "Rondas Jugadas: " << sortedPlayers[j].rondasJugadas << endl;
        cout << "Rondas Ganadas: " << sortedPlayers[j].rondasGanadas << endl;
        cout << "Porcentaje de victorias: " << sortedPlayers[j].percentGanadas << "%" << endl;
    }
}

void winRateUpdate() {
    for (int i = 0; i < jugadores.size(); i++) 
        jugadores[i].percentGanadas = to_string(float(stoi(jugadores[i].rondasGanadas) / stoi(jugadores[i].rondasJugadas)));
}

void eliminarJugadoresSinFichas() {
    vector <jugador> jugadoresActualizados;

    for (int i = 0; i < jugadores.size(); i++) {
        if (stof(jugadores[i].fichas) > 0)
            jugadoresActualizados.push_back(jugadores[i]);
    }
    
    jugadores = jugadoresActualizados;
}

void ganadorRonda () {
    char jugada, ganada;
    int cantidadApostada, banca;
    vector <jugador> jugadoresRonda;
    vector <jugador> ganadoresRonda;
    
    cout << "Cual fue la cantidad final apostada (por persona)?: ";
    cin >> cantidadApostada;
    
    cout << "Jugadores en esta ronda?" << endl;
    for (int i = 0; i < jugadores.size(); i++) {
        cout << jugadores[i].nombre << "?: Y/N" << endl;
        cin >> jugada;
        while ((jugada != 'Y') && (jugada != 'N')) {
            cout << "Respuesta no aceptable, por favor, inserte Y o N: ";
            cin >> jugada;
        }
        if (jugada == 'Y') {
            jugadoresRonda.push_back(jugadores[i]);
            int rondasJugadasJugador = stoi(jugadoresRonda[jugadoresRonda.size()].rondasJugadas);
            rondasJugadasJugador++;
            jugadoresRonda[jugadoresRonda.size()].rondasJugadas = to_string(rondasJugadasJugador);
            float fichasJugador = stof(jugadoresRonda[jugadoresRonda.size()].fichas);
            fichasJugador -= cantidadApostada;
            banca += cantidadApostada;
            jugadoresRonda[jugadoresRonda.size()].fichas = to_string(fichasJugador);
        }
        else
            continue;
    };
    
    cout << "Ganador de la ronda?";
    for (int j = 0; j < jugadoresRonda.size(); j++) {
        cout << jugadoresRonda[j].nombre << "?: Y/N" << endl;
        cin >> ganada;
        while ((toupper(ganada) != 'Y') && (toupper(ganada) != 'N')) {
            cout << "Respuesta no aceptable, por favor, inserte Y o N: ";
            cin >> ganada;
        }
        if (toupper(ganada) == 'Y') {
            ganadoresRonda.push_back(jugadoresRonda[j]);
            int rondasGanadasJugador = stoi(ganadoresRonda[ganadoresRonda.size()].rondasGanadas);
            rondasGanadasJugador++;
            ganadoresRonda[ganadoresRonda.size()].rondasGanadas = to_string(rondasGanadasJugador);
        }
        else
            continue;
    };
        
    for (int k = 0; k < ganadoresRonda.size(); k++) {
        float fichasJugador = stof(ganadoresRonda[k].fichas);
        fichasJugador += float(banca / ganadoresRonda.size());
    }

    winRateUpdate();
    eliminarJugadoresSinFichas();
}

void transferirFichas() {
    string name1, name2;
    vector <jugador> involvedPlayers;
    jugador originPlayer, receivingPlayer;

    cout << "Â¿Jugador origen?" << endl;
    for (int i = 0; i < jugadores.size(); i++)
        cout << "->" << jugadores[i].nombre << endl;
    cin >> name1;
    originPlayer = playerFinder(name1);
    int index1 = indexFinder(originPlayer);
   
    if (originPlayer.nombre == "N/A") {
        cout << endl << "No se ha encontrado a ni un jugador con ese nombre" << endl;
        return;
    }
   
   cout << "Â¿Jugador final?" << endl;
    for (int i = 0; i < jugadores.size(); i++) {
        if (jugadores[i].nombre == name1)
            continue;
        cout << "->" << jugadores[i].nombre << endl;
    }
    cin >> name2;
    receivingPlayer = playerFinder(name2);
    int index2 = indexFinder(receivingPlayer);
   
    if (receivingPlayer.nombre == "N/A") {
        cout << endl << "No se ha encontrado a ni un jugador con ese nombre" << endl;
        return;
    }
    if (receivingPlayer.nombre == originPlayer.nombre) {
        cout << "Un jugador no se puede transferir fichas a sÃ­ mismo" << endl;
        return;
    }
    
    int opchips = stof(originPlayer.fichas);
    int rpchips = stof(receivingPlayer.fichas);
    float fichas_a_enviar;

    cout << "Introduce la cantidad de fichas a enviar: ";
    cin >> fichas_a_enviar;

    if (opchips < fichas_a_enviar) {
        cout << "El jugador no tiene suficientes fichas para realizar la transferencia." << endl;
        return;
    }

    rpchips += fichas_a_enviar;
    opchips -= fichas_a_enviar;

    jugadores[index1].fichas = to_string(opchips);
    jugadores[index2].fichas = to_string(rpchips);

    cout << endl << "La transferencia de fichas se ha realizado correctamente." << endl;

    eliminarJugadoresSinFichas();
}
